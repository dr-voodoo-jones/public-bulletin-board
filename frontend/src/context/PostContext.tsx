import React, { createContext, useContext, useState, useEffect } from 'react'nimport { Post, PostFilters } from '../types/post.ts'nninterface PostContextType {n  posts: Post[]n  loading: booleann  error: string | nulln  filters: PostFiltersn  setFilters: (filters: PostFilters) => voidn  addPost: (post: Post) => voidn  updatePost: (id: string, updates: Partial<Post>) => voidn  deletePost: (id: string) => voidn  refreshPosts: () => voidn}nnconst PostContext = createContext<PostContextType | undefined>(undefined)nnexport const usePosts = () => {n  const context = useContext(PostContext)n  if (!context) {n    throw new Error('usePosts must be used within a PostProvider')n  }n  return contextn}nnexport const PostProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {n  const [posts, setPosts] = useState<Post[]>([])n  const [loading, setLoading] = useState(false)n  const [error, setError] = useState<string | null>(null)n  const [filters, setFilters] = useState<PostFilters>({n    search: '',n    tags: [],n    sortBy: 'newest'n  })nn  const addPost = (post: Post) => {n    setPosts(prev => [post, ...prev])n  }nn  const updatePost = (id: string, updates: Partial<Post>) => {n    setPosts(prev => prev.map(post => post.id === id ? { ...post, ...updates } : post))n  }nn  const deletePost = (id: string) => {n    setPosts(prev => prev.filter(post => post.id !== id))n  }nn  const refreshPosts = () => {n    // This will be implemented when we connect to the backendn    console.log('Refreshing posts...')n  }nn  const value = {n    posts,n    loading,n    error,n    filters,n    setFilters,n    addPost,n    updatePost,n    deletePost,n    refreshPostsn  }nn  return (n    <PostContext.Provider value={value}>n      {children}n    </PostContext.Provider>n  )n}