import React, { createContext, useContext, useEffect, useState } from 'react'nimport { motion, AnimatePresence } from 'framer-motion'nninterface ThemeContextType {n  theme: 'light' | 'dark' | 'auto'n  toggleTheme: () => voidn  setTheme: (theme: 'light' | 'dark' | 'auto') => voidn}nnconst ThemeContext = createContext<ThemeContextType | undefined>(undefined)nnexport const useTheme = () => {n  const context = useContext(ThemeContext)n  if (!context) {n    throw new Error('useTheme must be used within a ThemeProvider')n  }n  return contextn}nnexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {n  const [theme, setThemeState] = useState<'light' | 'dark' | 'auto'>('auto')n  const [mounted, setMounted] = useState(false)nn  useEffect(() => {n    setMounted(true)n    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' | 'auto'n    if (savedTheme) {n      setThemeState(savedTheme)n    }n  }, [])nn  useEffect(() => {n    if (!mounted) returnnn    const root = window.document.documentElementn    root.classList.remove('light', 'dark')nn    if (theme === 'auto') {n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'n      root.classList.add(systemTheme)n    } else {n      root.classList.add(theme)n    }nn    localStorage.setItem('theme', theme)n  }, [theme, mounted])nn  const toggleTheme = () => {n    setThemeState(prev => {n      if (prev === 'light') return 'dark'n      if (prev === 'dark') return 'auto'n      return 'light'n    })n  }nn  const setTheme = (newTheme: 'light' | 'dark' | 'auto') => {n    setThemeState(newTheme)n  }nn  if (!mounted) {n    return <div className='min-h-screen bg-white dark:bg-gray-900' />n  }nn  return (n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>n      <AnimatePresence mode='wait'>n        <motion.divn          key={theme}n          initial={{ opacity: 0 }}n          animate={{ opacity: 1 }}n          exit={{ opacity: 0 }}n          transition={{ duration: 0.3 }}n        >n          {children}n        </motion.div>n      </AnimatePresence>n    </ThemeContext.Provider>n  )n}